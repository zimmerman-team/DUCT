version: 2
jobs:
  set_up_test_deploy:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.5

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: mdillon/postgis:9.6

    environment:
      POSTGRES_USER: circleci
      POSTGRES_DB: circle_test

    working_directory: ~/DUCT

    steps:
      - checkout
      - run:
          name: Update package lists before installing dependencies
          command: sudo apt-get update

      - run:
          name: Install dependencies
          command: sudo sh bin/setup/install_dependencies.sh

      - run:
          name: Install Flake8 style guide checker
          command: sudo apt-get install flake8

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "ZOOM/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Create virtual environment before doing anything
          command: python3 -m venv env

      - run:
          name: Install main dependencies
          command: |
            . env/bin/activate
            pip install -r ZOOM/requirements.txt

      - save_cache:
          paths:
            - ./env
          key: v1-dependencies-{{ checksum "ZOOM/requirements.txt" }}

      - run:
          name: Creating log folder for pytest
          command: mkdir ZOOM/logs

#      - run:
#          name: Run Pytest tests
#          command: |
#            . env/bin/activate
#            # Run tests and generate test coverage report:
#            ./ZOOM/manage.py test

#      - store_artifacts:
#          path: test-reports
#          destination: test-reports

#      - run:
#          name: Run pep8 code style checks
#          command: |
#            . env/bin/activate
#            flake8 ZOOM

      - run:
          name: Add target host to known_hosts files
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              ssh-keyscan "$SSH_HOST_STAGING" >> ~/.ssh/known_hosts
            elif [ "${CIRCLE_BRANCH}" == "feature" ]; then
              ssh-keyscan "$SSH_HOST_DEV" >> ~/.ssh/known_hosts
            else
              ssh-keyscan "$SSH_HOST_DEV" >> ~/.ssh/known_hosts
            fi

      - add_ssh_keys:
          name: Add SSH KEY
          fingerprints: $FINGERPRINT

      - run:
          name: Update DUCT
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              ssh "$SSH_USER"@"$SSH_HOST_STAGING" "source envs/zoom/bin/activate; cd DUCT/ZOOM/; git pull; pip install -r requirements.txt; ./manage.py migrate; echo '"$SSH_STAGING_PASS"' | sudo -S service supervisor restart"
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              ssh "$SSH_USER"@"$SSH_HOST_DEV" "source .env/bin/activate; cd DUCT/ZOOM/; git pull; pip install -r requirements.txt; ./manage.py migrate; echo '"$SSH_DEV_PASS"' | sudo -S service supervisor restart"
            elif [ "${CIRCLE_BRANCH}" == "production" ]; then
              ssh "$SSH_USER"@"$SSH_HOST_PROD" "cd DUCT/; source env/bin/activate; cd ZOOM/; git pull; pip install -r requirements.txt; ./manage.py migrate; echo '"$SSH_PROD_PASS"' | sudo -S service supervisor restart"
            fi

workflows:
  version: 2
  set_up_test_deploy:
    jobs:
      - set_up_test_deploy
