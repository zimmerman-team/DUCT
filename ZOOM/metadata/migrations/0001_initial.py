# Generated by Django 2.1.3 on 2019-01-10 12:46

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import metadata.models
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geodata', '__first__'),
        ('mapping', '0002_remove_unique_on_field_data_'),
    ]

    operations = [
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('contains_subnational_data', models.BooleanField()),
                ('organisation', models.CharField(max_length=100)),
                ('maintainer', models.CharField(max_length=100)),
                ('date_of_dataset', models.DateField()),
                ('methodology', models.CharField(max_length=150)),
                ('define_methodology', models.TextField()),
                ('update_frequency', models.CharField(max_length=100)),
                ('comments', models.TextField()),
                ('accessibility', models.CharField(choices=[('o', 'open'), ('p', 'private'),
                                                            ('r', 'request'), ('a', 'all')], max_length=100)),
                ('data_quality', models.CharField(max_length=1000)),
                ('number_of_rows', models.IntegerField(help_text='No. of rows within dataset')),
                ('number_of_rows_saved', models.IntegerField(help_text='No. of rows from dataset saved within ZOOM', null=True)),
                ('file_types', models.CharField(choices=[('csv', 'csv'), ('json', 'json')], max_length=100)),
                ('data_uploaded', models.DateField(auto_now_add=True)),
                ('last_updated', models.DateField(auto_now=True)),
                ('original_file_location', models.CharField(max_length=300)),
                ('file_status', models.CharField(choices=[('1', 'Uploaded'), ('2', 'Error Correction'), ('3', 'Mapping'), ('4', 'Saved')], max_length=100)),
                ('datatypes_overview_file_location', models.CharField(max_length=500)),
                ('error_file_location', models.CharField(max_length=500)),
                ('file', models.FileField(max_length=500, null=True, upload_to=metadata.models.upload_to)),
                ('file_heading_list', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='geodata.Geolocation')),
                ('mapping_used', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='mapping.Mapping')),
            ],
        ),
        migrations.CreateModel(
            name='FileSource',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FileTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SurveyData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('have_you_tested_tool', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ("Don't know", "Don't know")], help_text='Have you tested the tool in a pilot or with a test group before conducting it?', max_length=100)),
                ('who_did_you_test_with', multiselectfield.db.fields.MultiSelectField(choices=[('Enumerators', 'Enumerators'), ('Colleagues', 'Colleagues'), ('Respondents', 'Respondents'), ('Representative group of respondents', 'Representative group of respondents')], help_text='With who did you test the tool?', max_length=70)),
                ('considered_senstive', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ("Don't know", "Don't know")], help_text='The data contains information which can be considered senstive? (f.e. financial, health, food security information)', max_length=100)),
                ('staff_trained', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ("Don't know", "Don't know")], help_text='Staff was trained on how to ask the senstive information to avoid influencing the respondentâ€™s anwers?', max_length=100)),
                ('ask_sensitive', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ("Don't know", "Don't know")], help_text='It was possible for respondents to not answer certain questions if they found them to personal/senstive?', max_length=100)),
                ('select_respondents', multiselectfield.db.fields.MultiSelectField(choices=[('Simple random sampling', 'Simple random samplimng'), ('Stratified sampling', 'Stratified sampling'), ('Cluster sampling', 'Cluster sampling'), ('Systematic sampling', 'Systematic sampling'), ('Multistage sampling', 'Multistage sampling'), ('Other', 'Other')], help_text='How did you select respondents?', max_length=105)),
                ('other', models.CharField(help_text='If other, explain', max_length=200)),
                ('how_many_respondents', models.CharField(help_text='How many respondents were interviewed/participated?', max_length=100)),
                ('edit_sheet', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ("Don't know", "Don't know")], help_text='Did you clean/edit the data before uploading it?', max_length=100)),
                ('data_cleaning_techniques', multiselectfield.db.fields.MultiSelectField(choices=[('Check for outliers', 'Check for outliers'), ('Delete rows/columns with missing data', 'Delete rows/columns with missing data'), ('Check of geodata', 'Check of geodata'), ('Check consistency datatype per column', 'Check consistency datatype per column'), ('Join, delimite or concatenate data', 'Join, delimite or concatenate data'), ('Other', 'Other')], help_text='Which data cleaning techniques did you use?', max_length=152)),
            ],
        ),
        migrations.AddField(
            model_name='file',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.FileSource'),
        ),
        migrations.AddField(
            model_name='file',
            name='survey_data',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='file', to='metadata.SurveyData'),
        ),
        migrations.AddField(
            model_name='file',
            name='tags',
            field=models.ManyToManyField(to='metadata.FileTags'),
        ),
    ]
